import inspect
from typing import Callable, Dict

class MLVulnerabilityPredictor:
    """Simple ML predictor."""

    def __init__(self):
        self.weights = {'complexity': 0.3, 'loops': 0.2}
        self.history = []

    def extract_features(self, func: Callable) -> Dict[str, float]:
        try:
            source = inspect.getsource(func)
            features = {'complexity': len(source) / 1000, 'loops': source.count('for') + source.count('while')}
            return {k: min(v, 1.0) for k, v in features.items()}
        except:
            return {'complexity': 0.0, 'loops': 0.0}

    def predict_score(self, features: Dict[str, float]) -> float:
        score = sum(features.get(k, 0) * w for k, w in self.weights.items())
        return 1.0 / (1.0 + 2.718 ** (-2 * score))

    def train(self, features: Dict, actual_vulns: int):
        predicted = self.predict_score(features)
        actual = min(actual_vulns / 5.0, 1.0)
        self.history.append({'error': abs(actual - predicted)})

    def get_accuracy(self) -> float:
        if not self.history:
            return 0.0
        return max(0.0, 1.0 - sum(h['error'] for h in self.history) / len(self.history))
